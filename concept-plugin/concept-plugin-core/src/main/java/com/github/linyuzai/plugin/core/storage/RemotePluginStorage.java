package com.github.linyuzai.plugin.core.storage;

import com.github.linyuzai.plugin.core.concept.PluginDefinition;
import lombok.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public abstract class RemotePluginStorage extends AbstractPluginStorage {

    public static final String GROUP_METADATA = "concept_plugin.properties";

    public static final String DEFAULT_LOCATION = "concept-plugin";

    public static final String METADATA_STATUS = "concept-plugin-status";

    public static final String METADATA_CREATE_TIME = "concept-plugin-create-time";

    private String bucket = DEFAULT_LOCATION;

    @Override
    public void initialize() {
        super.initialize();
        if (!existBucket(bucket)) {
            createBucket(bucket);
        }
    }

    @Override
    public String getLocation() {
        return bucket;
    }

    @Override
    public List<String> getGroups() {
        return listObjects(getBucket(), null)
                .stream()
                .map(it -> {
                    if (it.endsWith("/")) {
                        return it.substring(0, it.length() - 1);
                    } else {
                        return it;
                    }
                })
                .collect(Collectors.toList());
    }

    @SneakyThrows
    @Override
    public void addGroup(String group) {
        Properties properties = new Properties();
        properties.setProperty("group.name", group);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        properties.store(os, "Generated by Concept Plugin");
        byte[] bytes = os.toByteArray();
        putObject(bucket, getPluginPath(group, GROUP_METADATA),
                new ByteArrayInputStream(bytes), bytes.length, Collections.emptyMap());
    }

    @Override
    public Stream<PluginDefinition> getPluginDefinitions(String type, String group) {
        return getPlugins(type, group).stream().map(name -> getPluginDefinition(type, group, name));
    }

    @Override
    public String uploadPlugin(String group, String name, InputStream is, long length) {
        String pluginName = generateName(group, name);
        Map<String, String> map = new LinkedHashMap<>();
        map.put(METADATA_STATUS, PluginStorage.UNLOADED);
        map.put(METADATA_CREATE_TIME, String.valueOf(new Date().getTime()));
        putObject(bucket, getPluginPath(group, pluginName), is, length, map);
        return pluginName;
    }

    @Override
    public void loadPlugin(String group, String name) {
        Map<String, String> userMetadata = createUserMetadata(group, name, PluginStorage.LOADED);
        putUserMetadata(getBucket(), getPluginPath(group, name), userMetadata);
    }

    @Override
    public void unloadPlugin(String group, String name) {
        Map<String, String> userMetadata = createUserMetadata(group, name, PluginStorage.UNLOADED);
        putUserMetadata(getBucket(), getPluginPath(group, name), userMetadata);
    }

    @Override
    public void deletePlugin(String group, String name) {
        Map<String, String> userMetadata = createUserMetadata(group, name, PluginStorage.DELETED);
        String bucket = getBucket();
        String key = getPluginPath(group, name);
        String deleteName = generateDeletedName(group, name);
        String deleteKey = getPluginPath(group, deleteName);
        copyObject(bucket, key, bucket, deleteKey, userMetadata);
        deleteObject(bucket, key);
    }

    @Override
    public boolean existPlugin(String group, String name) {
        return existObject(getBucket(), getPluginPath(group, name));
    }

    @Override
    public void renamePlugin(String group, String name, String rename) {
        if (existPlugin(group, rename)) {
            throw new IllegalArgumentException("Name existed");
        }
        String bucket = getBucket();
        String src = getPluginPath(group, name);
        copyObject(bucket, src, bucket, getPluginPath(group, rename), null);
        deleteObject(bucket, src);
    }

    @Override
    public void clearDeleted(String group) {
        String bucket = getBucket();
        List<String> keys = getPlugins(DELETED, group)
                .stream()
                .map(name -> getPluginPath(group, name))
                .collect(Collectors.toList());
        deleteObjects(bucket, keys);
    }

    protected String getPluginPath(String group, String name) {
        return group + "/" + name;
    }

    protected String generateName(String group, String name) {
        return generateName(name, n -> existObject(getBucket(), getPluginPath(group, n)));
    }

    protected String generateDeletedName(String group, String name) {
        return generateDeletedName(name, n -> existObject(getBucket(), getPluginPath(group, n)));
    }

    protected Map<String, String> createUserMetadata(String group, String name, String status) {
        Map<String, String> userMetadata = getUserMetadata(getBucket(), getPluginPath(group, name));
        Map<String, String> newUserMetadata = new LinkedHashMap<>();
        if (userMetadata == null) {
            newUserMetadata.put(METADATA_CREATE_TIME, String.valueOf(new Date().getTime()));
        } else {
            newUserMetadata.putAll(userMetadata);
        }
        newUserMetadata.put(METADATA_STATUS, status);
        return newUserMetadata;
    }

    protected List<String> getPlugins(String type, String group) {
        String bucketToUse = getBucket();
        List<String> names = listObjects(bucketToUse, group + "/");
        List<String> plugins = new ArrayList<>();
        for (String name : names) {
            if (name.endsWith(GROUP_METADATA)) {
                continue;
            }
            if (filter(group, name)) {
                Map<String, String> userMetadata = getUserMetadata(bucketToUse, name);
                String pluginStatus = userMetadata.get(METADATA_STATUS);
                if (type.equals(pluginStatus)) {
                    plugins.add(name);
                }
            }
        }
        return plugins.stream().map(it -> {
            if (it.startsWith(group + "/")) {
                return it.substring(group.length() + 1);
            } else {
                return it;
            }
        }).collect(Collectors.toList());
    }

    protected abstract boolean existBucket(String bucket);

    protected abstract void createBucket(String bucket);

    protected abstract List<String> listObjects(String bucket, String prefix);

    protected abstract Map<String, String> getUserMetadata(String bucket, String key);

    protected abstract void putUserMetadata(String bucket, String key, Map<String, String> userMetadata);

    protected abstract boolean existObject(String bucket, String key);

    protected abstract void copyObject(String srcBucket, String srcKey, String destBucket, String destKey, Map<String, String> userMetadata);

    protected abstract InputStream getObject(String bucket, String key);

    protected abstract void deleteObject(String bucket, String key);

    protected abstract void deleteObjects(String bucket, List<String> keys);

    protected abstract void putObject(String bucket, String key,
                                      InputStream is, long length,
                                      Map<String, String> userMetadata);

    public static abstract class RemotePluginDefinition<T> implements PluginDefinition {

        private T objectMetadata;

        protected T useObjectMetadata() {
            if (objectMetadata == null) {
                objectMetadata = newObjectMetadata();
            }
            return objectMetadata;
        }

        protected abstract T newObjectMetadata();
    }
}
