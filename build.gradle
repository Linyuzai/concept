plugins {
    id 'java'
    //id 'org.javamodularity.moduleplugin' version '1.7.0'
    //id 'org.springframework.boot' version '3.4.3'
    //id 'io.spring.dependency-management' version '1.1.3'
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0' //1.6.10
    id 'org.jetbrains.dokka' version '1.6.0'

    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    //id 'org.jreleaser' version '1.20.0'
}

allprojects {

    ext {
        set('SpringDocVersion', '1.6.13')
        set('MyBatisPlusVersion', '3.5.2')
        set('NettyVersion', '4.1.85.Final')
        set('RedissonVersion', '3.22.1')
        set('ReactorVersion', '3.4.25')
        set('RxJava3Version', '3.1.6')
        set('OkHttpVersion', '4.9.3')
        set('Zip4jVersion', '2.11.5')
        set('CommonsCompressVersion', '1.25.0')
        set('XnioVersion', '3.8.6.Final')
        set('AwsS3V1Version', '1.12.783')
        set('AwsS3V2Version', '2.31.33')
        set('MinioVersion', '8.5.10')
        set('SnakeYamlVersion', '1.30')
        set('VueVersion', '2.6.11')
        set('VueResourceVersion', '1.5.1')
        set('AxiosVersion', '1.7.2')
        set('ElementUIVersion', '2.15.1')
        set('ShowdownVersion', '2.1.0')
    }

    group = 'com.github.linyuzai'

    repositories {
        mavenCentral()
    }

    /*if (project.name.contains('intellij') || project.name == 'sample') {
        sourceCompatibility = '17'
        targetCompatibility = '17'
        return
    }*/

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    apply plugin: 'java-library'
    //apply plugin: "org.javamodularity.moduleplugin"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    if (project.name == 'concept-download-coroutines') {
        apply plugin: 'org.jetbrains.kotlin.jvm'
        apply plugin: 'org.jetbrains.dokka'

        tasks.dokkaJavadoc.configure {
            outputDirectory.set(javadoc.destinationDir)
        }
    }

    dependencies {

        /*compileOnly 'org.springframework.cloud:spring-cloud-starter'
        compileOnly 'org.springframework.cloud:spring-cloud-loadbalancer'

        compileOnly 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.springframework.boot:spring-boot-starter-aop'
        compileOnly 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.springframework.boot:spring-boot-starter-webflux'
        compileOnly 'org.springframework.boot:spring-boot-starter-websocket'
        compileOnly 'org.springframework.boot:spring-boot-starter-amqp'

        compileOnly 'org.springframework.kafka:spring-kafka'

        compileOnly "org.springdoc:springdoc-openapi-ui:${SpringDocVersion}"
        compileOnly "com.baomidou:mybatis-plus-boot-starter:${MyBatisPlusVersion}"

        compileOnly "org.jboss.xnio:xnio-api:${XnioVersion}"
        compileOnly "io.netty:netty-all:${NettyVersion}"*/
        compileOnly 'org.jetbrains:annotations:13.0'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testCompileOnly 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.4'
            mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.1'
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    bootJar.enabled = false
    jar.enabled = true
    jar.archiveClassifier.set('')
}
/*apply from: 'github.gradle'

subprojects {
    apply plugin: 'java'
    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name = "Concept"
                url = uri("https://maven.pkg.github.com/linyuzai/concept")
                credentials {
                    username = githubUsername
                    password = githubPassword
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }
}*/
