//该文件为发布密钥配置
//如果想要本地编译
//可以在最外层目录添加sonatype.gradle文件
//并定义sonatypeUsername和sonatypePassword
apply from: '../../sonatype.gradle'

apply plugin: 'maven-publish'
//apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    // 定义发布什么
    publications {
        mavenJava(MavenPublication) {
            // groupId = project.group
            // artifactId = project.name
            // version = project.version
            // groupId,artifactId,version，如果不定义，则会按照以上默认值执行
            from components.java
            //artifact makeJar
            //artifact sourcesJar
            //artifact javadocJar
            pom {
                // 构件名称
                // 区别于artifactId，可以理解为artifactName
                name = publishName
                // 构件描述
                description = publishDescription
                // 构件主页
                url = 'https://github.com/Linyuzai/concept'
                // 许可证名称和地址
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                // 开发者信息
                developers {
                    developer {
                        name = '黑白法师'
                        email = '120718461@qq.com'
                    }
                }
                // 版本控制仓库地址
                scm {
                    url = 'https://github.com/Linyuzai/concept'
                    connection = 'scm:git:git://github.com/Linyuzai/concept.git'
                    developerConnection = 'scm:git:ssh://git@github.com:Linyuzai/concept.git'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    environment {
        // Location of a properties file with key/value pairs
        // Each key must be prefixed with `JRELEASER_` and match
        // the environment variable it overrides.
        //
        variables = 'path/to/alternate/config.properties'

        // Additional properties used when evaluating templates.
        //
        //properties.put('foo', 'bar')
    }
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
            /* Legacy OSSRH
            nexus2 {
                'maven-central' {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository('build/staging-deploy')
                }
            }
            */
        }
    }
}

/*signing {
    sign publishing.publications.mavenJava
}*/

javadoc {
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('Xdoclint:none', '-quiet')
}
